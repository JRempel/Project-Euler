package problem12;

import java.math.BigInteger;

/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * */

public class HighlyDivisibleTriangularNumber {
	public static void main(String[] args) {
		int numtoSearchFor = 500;
		BigInteger sum = new BigInteger("0");
		int divisors = 0;
		int start = 1;
		while (true) {
			// find sum
			sum = (BigInteger.valueOf(start).multiply(BigInteger.valueOf(start + 1))).divide(BigInteger.valueOf(2));
			// find divisors
			divisors = divisors(Integer.parseInt(sum.toString()));
			// exit condition
			if (divisors > numtoSearchFor)
				break;
			// progress indicator
			if (start % 1000 == 0 && start != 0)
				System.out.println(start + " , " + sum + " , " + divisors);
			// clean up values for next loop
			divisors = 0;
			sum = new BigInteger("0");
			start++;
		}
		System.out.println(start + " " + sum + " " + divisors);
	}

	public static int divisors(int n) {
		int counter = 0;
		for (int i = 1; i * i <= n; i++) {
			if (n % i == 0)
				counter += 2;
		}
		return counter;
	}
}
